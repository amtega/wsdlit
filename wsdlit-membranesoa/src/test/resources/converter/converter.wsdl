<?xml version="1.0" encoding="UTF-8"?>
<definitions name="converter" targetNamespace="http://localhost.localdomain/wsdlit/test/converter"
             xmlns="http://schemas.xmlsoap.org/wsdl/"
             xmlns:xsd="http://www.w3.org/2001/XMLSchema"
             xmlns:tns="http://localhost.localdomain/wsdlit/test/converter"
             xmlns:plnk="http://docs.oasis-open.org/wsbpel/2.0/plnktype">
    <types>
        <xsd:schema
                targetNamespace="http://localhost.localdomain/wsdlit/test/converter"
                xmlns:tns="http://localhost.localdomain/wsdlit/test/converter"
                elementFormDefault="qualified">
            <xsd:complexType name="CyclicComplexType">
                <xsd:sequence>
                    <xsd:element name="cyclic" type="tns:CyclicComplexType"/>
                </xsd:sequence>
            </xsd:complexType>
            <xsd:complexType name="NotCyclicComplexType">
                <xsd:sequence>
                    <xsd:element name="cyclic" type="xsd:string"/>
                </xsd:sequence>
            </xsd:complexType>
            <xsd:complexType name="ExtensionElementStringComplexType">
                <xsd:complexContent>
                    <xsd:extension base="tns:StringElementComplexType">
                        <xsd:sequence>
                            <xsd:element name="elementTwo" type="xsd:string">
                                <xsd:annotation>
                                    <xsd:documentation>Hello world</xsd:documentation>
                                </xsd:annotation>
                            </xsd:element>
                        </xsd:sequence>
                    </xsd:extension>
                </xsd:complexContent>
            </xsd:complexType>

            <xsd:complexType name="ExtensionStringComplexType">
                <xsd:simpleContent>
                    <xsd:extension base="xsd:string"/>
                </xsd:simpleContent>
            </xsd:complexType>

            <xsd:complexType name="RestrictionStringComplexType">
                <xsd:simpleContent>
                    <xsd:extension base="tns:MainSimpleType">
                        <xsd:restriction base="xsd:string">
                            <xsd:enumeration value="brother"/>
                        </xsd:restriction>
                    </xsd:extension>
                </xsd:simpleContent>
            </xsd:complexType>

            <xsd:complexType name="StringElementComplexType">
                <xsd:sequence>
                    <xsd:element name="element" type="xsd:string">
                        <xsd:annotation>
                            <xsd:documentation>Hello world</xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                </xsd:sequence>
            </xsd:complexType>

            <xsd:complexType name="EmptyComplexType"/>

            <xsd:simpleType name="MainSimpleType">
                <xsd:restriction base="xsd:string">
                    <xsd:enumeration value="child"/>
                    <xsd:enumeration value="parent"/>
                </xsd:restriction>
            </xsd:simpleType>

            <xsd:complexType name="PartConvertTestCaseType">
                <xsd:sequence>
                    <xsd:element name="id" type="xsd:string"/>
                </xsd:sequence>
            </xsd:complexType>

            <xsd:complexType name="ModelGroupConverterChoiceTestCase">
                <xsd:choice>
                    <xsd:element name="id" type="xsd:string"/>
                    <xsd:element name="name" type="xsd:string"/>
                </xsd:choice>
            </xsd:complexType>

            <xsd:complexType name="ModelGroupConverterAllTestCase">
                <xsd:all>
                    <xsd:element name="id" type="xsd:string"/>
                    <xsd:element name="name" type="xsd:string"/>
                </xsd:all>
            </xsd:complexType>

            <xsd:complexType name="ModelGroupConverterSequenceTestCase">
                <xsd:sequence>
                    <xsd:element name="id" type="xsd:string"/>
                    <xsd:element name="name" type="xsd:string"/>
                </xsd:sequence>
            </xsd:complexType>

            <xsd:element name="elementPartConverterTestCaseComplexType" type="tns:PartConvertTestCaseType"/>
        </xsd:schema>
    </types>
    <message name="addRequest">
        <part name="part" type="xsd:string"/>
    </message>
    <message name="addResponse">
        <part name="part" type="xsd:string"/>
    </message>
    <message name="addFault">
        <part name="part" type="xsd:string"/>
    </message>
    <message name="messagePartConverterTestCaseTypeRequest">
        <part name="part" type="tns:EmptyComplexType"/>
    </message>
    <message name="messagePartConverterTestCaseComplexTypeRequest">
        <part name="part" element="tns:elementPartConverterTestCaseComplexType"/>
    </message>
    <portType name="computePortType">
        <operation name="add">
            <input name="input1" message="tns:addRequest"/>
            <output name="output1" message="tns:addResponse"/>
            <fault name="fault1" message="tns:addFault"/>
        </operation>
    </portType>
    <plnk:partnerLinkType name="converter">
        <!-- A partner link type is automatically generated when a new port type is added. Partner link types are used by BPEL processes.
In a BPEL process, a partner link represents the interaction between the BPEL process and a partner service. Each partner link is associated with a partner link type.
A partner link type characterizes the conversational relationship between two services. The partner link type can have one or two roles.-->
        <plnk:role name="computePortTypeRole" portType="tns:computePortType"/>
    </plnk:partnerLinkType>
</definitions>
